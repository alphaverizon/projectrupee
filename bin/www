#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const app = require('../app');
 const debug = require('debug')('node-rupiee:server');
 const https = require('https');
 const http = require('http');
 const fs = require('fs');
 const path = require('path');
 const session = require('express-session')({secret: 'Password@123', resave: false, saveUninitialized: true});

/**
 * Get port from environment and store in Express.
 */

 const port = normalizePort(process.env.PORT || '3001');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 const servKey = path.join(__dirname, '..', '.cert', 'collectPay.key');
 const servCert = path.join(__dirname, '..', '.cert', 'collectPay.cer');
 const options = {
  key: fs.readFileSync(servKey),
  cert: fs.readFileSync(servCert)
}
const server = https.createServer(options, app);
// const server = http.createServer(app);
const io = require('socket.io')(server);

io.use(function(socket, next) {
  session(socket.request, socket.request.res, next);
});

io.use(function(socket, next) {
  if(!socket.handshake.query.sessionId) {
    // console.log('No query parameter');
    next(new Error('Authentication Error'));
  } else {
    let sessionId = socket.handshake.query.sessionId;
    // console.log('SessionId = ' + sessionId);
    socket.request.session.sessionId = sessionId;
    next();
  }  
});
/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 server.on('listening', function initIo() {
  require('../lib/gateway/transaction.js').initIo(io);
 });
server.on('listening', function initErpIo() {
  require('../routes/index.js').initErpIo(io);
 });

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

 function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
